=============================================================================
List of generated methods in project: MCCAR_V_2_5

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "LED_BLUE_F_L" (component LED)
   - LED_BLUE_F_L_On -This turns the LED on.
   - LED_BLUE_F_L_Off -This turns the LED off.
   - LED_BLUE_F_L_Neg -This negates/toggles the LED
   - LED_BLUE_F_L_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED_BLUE_F_L_Put -Turns the LED on or off.
   - LED_BLUE_F_L_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For 
                On/off pins, values smaller 0x7FFF means off, while values greater means on.
   - LED_BLUE_F_L_Deinit -Deinitializes the driver
   - LED_BLUE_F_L_Init -Performs the LED driver initialization.

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "LED_RED_F_L" (component LED)
   - LED_RED_F_L_On -This turns the LED on.
   - LED_RED_F_L_Off -This turns the LED off.
   - LED_RED_F_L_Neg -This negates/toggles the LED
   - LED_RED_F_L_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED_RED_F_L_Put -Turns the LED on or off.
   - LED_RED_F_L_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off 
                pins, values smaller 0x7FFF means off, while values greater means on.
   - LED_RED_F_L_Deinit -Deinitializes the driver
   - LED_RED_F_L_Init -Performs the LED driver initialization.

Module "LED_GREEN_F_L" (component LED)
   - LED_GREEN_F_L_On -This turns the LED on.
   - LED_GREEN_F_L_Off -This turns the LED off.
   - LED_GREEN_F_L_Neg -This negates/toggles the LED
   - LED_GREEN_F_L_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED_GREEN_F_L_Put -Turns the LED on or off.
   - LED_GREEN_F_L_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For 
                On/off pins, values smaller 0x7FFF means off, while values greater means on.
   - LED_GREEN_F_L_Deinit -Deinitializes the driver
   - LED_GREEN_F_L_Init -Performs the LED driver initialization.

Module "LED_BLUE_F_R" (component LED)
   - LED_BLUE_F_R_On -This turns the LED on.
   - LED_BLUE_F_R_Off -This turns the LED off.
   - LED_BLUE_F_R_Neg -This negates/toggles the LED
   - LED_BLUE_F_R_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED_BLUE_F_R_Put -Turns the LED on or off.
   - LED_BLUE_F_R_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For 
                On/off pins, values smaller 0x7FFF means off, while values greater means on.
   - LED_BLUE_F_R_Deinit -Deinitializes the driver
   - LED_BLUE_F_R_Init -Performs the LED driver initialization.

Module "LED_RED_F_R" (component LED)
   - LED_RED_F_R_On -This turns the LED on.
   - LED_RED_F_R_Off -This turns the LED off.
   - LED_RED_F_R_Neg -This negates/toggles the LED
   - LED_RED_F_R_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED_RED_F_R_Put -Turns the LED on or off.
   - LED_RED_F_R_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off 
                pins, values smaller 0x7FFF means off, while values greater means on.
   - LED_RED_F_R_Deinit -Deinitializes the driver
   - LED_RED_F_R_Init -Performs the LED driver initialization.

Module "LED_GREEN_F_R" (component LED)
   - LED_GREEN_F_R_On -This turns the LED on.
   - LED_GREEN_F_R_Off -This turns the LED off.
   - LED_GREEN_F_R_Neg -This negates/toggles the LED
   - LED_GREEN_F_R_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - LED_GREEN_F_R_Put -Turns the LED on or off.
   - LED_GREEN_F_R_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For 
                On/off pins, values smaller 0x7FFF means off, while values greater means on.
   - LED_GREEN_F_R_Deinit -Deinitializes the driver
   - LED_GREEN_F_R_Init -Performs the LED driver initialization.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "HS_MOT_R"  (component QuadCounter)
   - HS_MOT_R_GetPos -Returns the current position based on the encoder tracking.
   - HS_MOT_R_SetPos -Sets the position information. Can be used as well to reset the position information.
   - HS_MOT_R_GetVal -Returns the quadrature value (0, 1, 2 or 3)
   - HS_MOT_R_Sample -Call this method to periodically sample the signals.
   - HS_MOT_R_Deinit -Module de-initialization method
   - HS_MOT_R_Init -Module initialization method

Module "HS_MOT_L"  (component QuadCounter)
   - HS_MOT_L_GetPos -Returns the current position based on the encoder tracking.
   - HS_MOT_L_SetPos -Sets the position information. Can be used as well to reset the position information.
   - HS_MOT_L_GetVal -Returns the quadrature value (0, 1, 2 or 3)
   - HS_MOT_L_Sample -Call this method to periodically sample the signals.
   - HS_MOT_L_Deinit -Module de-initialization method
   - HS_MOT_L_Init -Module initialization method

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByte -Read a byte from the device. This writes (S+i2cAddr+0), (Sr+i2cAddr+1),(data+P)
   - GI2C1_WriteByte -Write a byte to the device: (S+i2cAddr+0).(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ReadWordAddress8 -Read a word from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteWordAddress8 -Write a word to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_Init -Initializes the driver.

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.
   - CI2C1_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.

Module "JOY_UP"    (component BitIO)
   - JOY_UP_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "JOY_DOWN"  (component BitIO)
   - JOY_DOWN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "JOY_LEFT"  (component BitIO)
   - JOY_LEFT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "JOY_RIGHT" (component BitIO)
   - JOY_RIGHT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "JOY_PUSH"  (component BitIO)
   - JOY_PUSH_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "AS_BLE"    (component Serial)
   - AS_BLE_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - AS_BLE_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS_BLE_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error),
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS_BLE_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - AS_BLE_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS_BLE_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS_BLE_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - AS_BLE_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "CLS_BLE"   (component Shell)
   - CLS_BLE_PrintPrompt -Prints the prompt to the stdOut channel
   - CLS_BLE_SendNum8u -Sends an 8bit unsigned number to the given I/O
   - CLS_BLE_SendNum8s -Sends an 8bit signed number to the given I/O
   - CLS_BLE_SendNum16u -Sends a 16bit unsigned number to the given I/O
   - CLS_BLE_SendNum16s -Sends a 16bit signed number to the given I/O
   - CLS_BLE_SendNum32u -Sends a 32bit unsigned number to the given I/O
   - CLS_BLE_SendNum32s -Sends a 32bit signed number to the given I/O
   - CLS_BLE_SendCh -Prints a character using an I/O function
   - CLS_BLE_SendStr -Prints a string using an I/O function
   - CLS_BLE_printfIO -Printf() style function using XFormat component, using a custom I/O handler.
   - CLS_BLE_printf -Printf() style function using XFormat component, using the shell default I/O handler.
   - CLS_BLE_SendData -Sends data using an I/O function. Unlike SendStr(), with this method it is possible to send binary data, 
                including zero bytes.
   - CLS_BLE_PrintStatus -Prints various available system status information
   - CLS_BLE_ParseCommand -Parses a shell command. Use 'help' to get a list of supported commands.
   - CLS_BLE_IsHistoryCharacter -Returns TRUE if character is a history character
   - CLS_BLE_ReadLine -Reads a line from stdIn and returns TRUE if we have a line, FALSE otherwise.
   - CLS_BLE_PrintCommandFailed -Prints a standard message for failed or unknown commands
   - CLS_BLE_IterateTable -Parses a shell command. It handles first the internal commands and will call the provided callback.
   - CLS_BLE_SetStdio -Sets an StdIO structure which is returned by GetStdio()
   - CLS_BLE_GetStdio -Returns the default stdio channel. This method is only available if a shell is enabled in the component 
                properties.
   - CLS_BLE_RequestSerial -Used to get mutual access to the shell console. Only has an effect if using an RTOS with semaphore 
                for the console access.
   - CLS_BLE_ReleaseSerial -Used to release mutual access to the shell console. Only has an effect if using an RTOS with 
                semaphore for the console access.
   - CLS_BLE_ReadAndParseWithCommandTable -Reads characters from the default input channel and appends it to the buffer. Once a 
                new line has been detected, the line will be parsed using the handlers in the table.
   - CLS_BLE_ParseWithCommandTable -Parses a shell command. It handles first the internal commands and will call the provided 
                callback.
   - CLS_BLE_GetSemaphore -Return the semaphore of the shell.
   - CLS_BLE_SendStatusStr -Prints a status string using an I/O function, formated for the 'status' command
   - CLS_BLE_SendHelpStr -Prints a string using an I/O function, formated for the 'help' command
   - CLS_BLE_ReadChar -Reads a character (blocking)
   - CLS_BLE_SendChar -Sends a character (blocking)
   - CLS_BLE_KeyPressed -Checks if a key has been pressed (a character is present in the input buffer)
   - CLS_BLE_SendCharFct -Method to send a character using a standard I/O handle.
   - CLS_BLE_Init -Initializes the module, especially creates the mutex semaphore if an RTOS is used.
   - CLS_BLE_Deinit -De-Initializes the module, especially frees the mutex semaphore if an RTOS is used.

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_strcatPad -Same as normal strcat, but safe as it does not write beyond the buffer. The buffer will be filled with a 
                pad character for a given length.
   - UTIL1_chcat -Adds a single character to a zero byte terminated string buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_NumFloatToStr -Converts a float value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a string buffer as hex number (without a 0x prefix). Only 24bits 
                are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a string buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a string buffer. The value is in 1/100 units.  For example 
                for the value -13456 it will append the string "-134.56"
   - UTIL1_strcatNumFloat -Converts a float value into a string.
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanDecimal32sDotNumber -Scans a decimal 32bit signed number with a following dot (fractional part), e.g. "-34587.
                0248", it will return the (signed) integral and fractional part with number of fractional zeros. The function 
                accepts as well numbers  like "17" (no fractional part" or "17.0"
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)
   - UTIL1_GetValue16LE -Returns a 16bit Little Endian value from memory
   - UTIL1_GetValue24LE -Returns a 24bit Little Endian value from memory
   - UTIL1_GetValue32LE -Returns a 32bit Little Endian value from memory
   - UTIL1_SetValue16LE -Stores a 16bit value in memory as Little Endian
   - UTIL1_SetValue24LE -Stores a 24bit value in memory as Little Endian
   - UTIL1_SetValue32LE -Stores a 32bit value in memory as Little Endian
   - UTIL1_map -Maps a value from one range to another
   - UTIL1_map64 -Maps a value from one range to another, using 64bit math
   - UTIL1_constrain -Makes sure that a given input value is inside a given range.
   - UTIL1_random -Provides a random value. You have to call intialize the random number generator with randomSetSeed() first!
   - UTIL1_randomSetSeed -Sets a seed for the random number generator
   - UTIL1_Deinit -Driver De-Initialization
   - UTIL1_Init -Driver Initialization

Module "XF1"       (component XFormat)
   - XF1_xvformat -Printf() like format function
   - XF1_xformat -Printf() like function using variable arguments
   - XF1_xsprintf -sprintf() like function
   - XF1_xsnprintf -snprintf() like function, returns the number of characters written, negative in case of error.
   - XF1_Deinit -Driver de-initialization routine
   - XF1_Init -Driver initialization routine

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section
   - CS1_Deinit -Driver de-initialization routine
   - CS1_Init -driver initialization routine

Module "CLS_PRG"   (component Shell)
   - CLS_PRG_PrintPrompt -Prints the prompt to the stdOut channel
   - CLS_PRG_SendNum8u -Sends an 8bit unsigned number to the given I/O
   - CLS_PRG_SendNum8s -Sends an 8bit signed number to the given I/O
   - CLS_PRG_SendNum16u -Sends a 16bit unsigned number to the given I/O
   - CLS_PRG_SendNum16s -Sends a 16bit signed number to the given I/O
   - CLS_PRG_SendNum32u -Sends a 32bit unsigned number to the given I/O
   - CLS_PRG_SendNum32s -Sends a 32bit signed number to the given I/O
   - CLS_PRG_SendCh -Prints a character using an I/O function
   - CLS_PRG_SendStr -Prints a string using an I/O function
   - CLS_PRG_printfIO -Printf() style function using XFormat component, using a custom I/O handler.
   - CLS_PRG_printf -Printf() style function using XFormat component, using the shell default I/O handler.
   - CLS_PRG_SendData -Sends data using an I/O function. Unlike SendStr(), with this method it is possible to send binary data, 
                including zero bytes.
   - CLS_PRG_PrintStatus -Prints various available system status information
   - CLS_PRG_ParseCommand -Parses a shell command. Use 'help' to get a list of supported commands.
   - CLS_PRG_IsHistoryCharacter -Returns TRUE if character is a history character
   - CLS_PRG_ReadLine -Reads a line from stdIn and returns TRUE if we have a line, FALSE otherwise.
   - CLS_PRG_PrintCommandFailed -Prints a standard message for failed or unknown commands
   - CLS_PRG_IterateTable -Parses a shell command. It handles first the internal commands and will call the provided callback.
   - CLS_PRG_SetStdio -Sets an StdIO structure which is returned by GetStdio()
   - CLS_PRG_GetStdio -Returns the default stdio channel. This method is only available if a shell is enabled in the component 
                properties.
   - CLS_PRG_RequestSerial -Used to get mutual access to the shell console. Only has an effect if using an RTOS with semaphore 
                for the console access.
   - CLS_PRG_ReleaseSerial -Used to release mutual access to the shell console. Only has an effect if using an RTOS with 
                semaphore for the console access.
   - CLS_PRG_ReadAndParseWithCommandTable -Reads characters from the default input channel and appends it to the buffer. Once a 
                new line has been detected, the line will be parsed using the handlers in the table.
   - CLS_PRG_ParseWithCommandTable -Parses a shell command. It handles first the internal commands and will call the provided 
                callback.
   - CLS_PRG_GetSemaphore -Return the semaphore of the shell.
   - CLS_PRG_SendStatusStr -Prints a status string using an I/O function, formated for the 'status' command
   - CLS_PRG_SendHelpStr -Prints a string using an I/O function, formated for the 'help' command
   - CLS_PRG_ReadChar -Reads a character (blocking)
   - CLS_PRG_SendChar -Sends a character (blocking)
   - CLS_PRG_KeyPressed -Checks if a key has been pressed (a character is present in the input buffer)
   - CLS_PRG_SendCharFct -Method to send a character using a standard I/O handle.
   - CLS_PRG_Init -Initializes the module, especially creates the mutex semaphore if an RTOS is used.
   - CLS_PRG_Deinit -De-Initializes the module, especially frees the mutex semaphore if an RTOS is used.

Module "AS_PRG"    (component Serial)
   - AS_PRG_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - AS_PRG_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS_PRG_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error),
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS_PRG_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - AS_PRG_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS_PRG_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS_PRG_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - AS_PRG_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "I_Motor_R" (component DAC)
   - I_Motor_R_SetValue -This method sets values of all channels.

Module "Kill"      (component BitIO)
   - Kill_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Kill_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Kill_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Kill_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "PWR_BTN"   (component BitIO)
   - PWR_BTN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "RTT1"      (component SeggerRTT)
   - RTT1_Read -Read from buffer
   - RTT1_Write -Write to buffer
   - RTT1_WriteString -Write to buffer
   - RTT1_printf -Stores a formatted string in SEGGER RTT control block. This data is sent to the host.
   - RTT1_GetKey -Returns a character/key
   - RTT1_WaitKey -Waits for a key and returns it.
   - RTT1_HasKey -Checks if at least one character for reading is available in the SEGGER RTT buffer
   - RTT1_SetTerminal -Sets the terminal to be used for output on channel 0.
   - RTT1_TerminalOut -Writes a string to the given terminal without changing the terminal for channel 0.
   - RTT1_ConfigUpBuffer -Configures the Up (device to host) buffer
   - RTT1_ConfigDownBuffer -Configures the Down (host to device) buffer
   - RTT1_RecvChar -Receives a character from channel 0. Returns ERR_RXEMPTY if no character available
   - RTT1_SendChar -Sends a character to channel 0.
   - RTT1_GetCharsInRxBuf -Returns the number of characters in the receive buffer.
   - RTT1_StdIOKeyPressed -StdIO handler for Shell
   - RTT1_StdIOReadChar -StdIO Handler for reading a character. It returns a zero byte if there is no character in input buffer.
   - RTT1_StdIOSendChar -StdIO handler to sends a character.
   - RTT1_GetStdio -Returns a pointer to the standard I/O
   - RTT1_Deinit -Driver deinitialization
   - RTT1_Init -Initializes the RTT Control Block.

Module "BLE_Mode"  (component BitIO)
   - BLE_Mode_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - BLE_Mode_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BLE_Mode_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - BLE_Mode_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "ADC_Channels" (component ADC)
   - ADC_Channels_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If 
                possible, this method switches on A/D converter device, voltage reference, etc.
   - ADC_Channels_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches 
                off A/D converter device, voltage reference, etc.
   - ADC_Channels_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: 
                If the <number of conversions> is more than one the conversion of A/D channels is performed specified number of 
                times.)
   - ADC_Channels_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method 
                this method returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> 
                is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC_Channels_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects 
                of the gain and offset from a specific reading.

Module "TU4"       (component TimerUnit_LDD)
   - TU4_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU4_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - TU4_GetEventStatus -Returns current pending flags and clears them.   Note: If corresponding events are generated then 
                these interrupt flags are deleted directly in the ISR. See Properties "Interrupt" and related events.
   - TU4_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU4_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "FC1"       (component FreeCntr)
   - FC1_Reset -This method resets the timer-counter (sets to zero for up-counting HW or to appropriate value for down-counting 
                HW). The method is available only if the counter register can be set by software and the counter is not shared.
   - FC1_GetCounterValue -This method returns a content of the counter.

Module "DRV1_FAULT" (component BitIO)
   - DRV1_FAULT_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV1_FAULT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV1_FAULT_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV1_FAULT_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DRV1_FAULT_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "DRV1_IN1"  (component BitIO)
   - DRV1_IN1_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV1_IN1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV1_IN1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV1_IN1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - DRV1_IN1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "DRV1_IN2"  (component BitIO)
   - DRV1_IN2_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV1_IN2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV1_IN2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV1_IN2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - DRV1_IN2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "DRV1_PMODE" (component BitIO)
   - DRV1_PMODE_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV1_PMODE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV1_PMODE_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV1_PMODE_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DRV1_PMODE_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "I_Motor_L" (component DAC)
   - I_Motor_L_SetValue -This method sets values of all channels.

Module "DRV2_FAULT" (component BitIO)
   - DRV2_FAULT_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV2_FAULT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV2_FAULT_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV2_FAULT_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DRV2_FAULT_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "DRV2_IN1"  (component BitIO)
   - DRV2_IN1_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV2_IN1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV2_IN1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV2_IN1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - DRV2_IN1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "DRV2_IN2"  (component BitIO)
   - DRV2_IN2_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV2_IN2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV2_IN2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV2_IN2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - DRV2_IN2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "DRV2_PMODE" (component BitIO)
   - DRV2_PMODE_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - DRV2_PMODE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - DRV2_PMODE_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DRV2_PMODE_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DRV2_PMODE_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "IMU_INT"   (component BitIO)
   - IMU_INT_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - IMU_INT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - IMU_INT_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - IMU_INT_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - IMU_INT_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "BLE_CONNECTED" (component BitIO)
   - BLE_CONNECTED_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - BLE_CONNECTED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - BLE_CONNECTED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BLE_CONNECTED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - BLE_CONNECTED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "PWR_SW"    (component BitIO)
   - PWR_SW_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - PWR_SW_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - PWR_SW_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - PWR_SW_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - PWR_SW_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "BAT_LOW"   (component BitIO)
   - BAT_LOW_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - BAT_LOW_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - BAT_LOW_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BAT_LOW_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - BAT_LOW_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "CHARGE_STATUS" (component BitIO)
   - CHARGE_STATUS_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - CHARGE_STATUS_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - CHARGE_STATUS_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - CHARGE_STATUS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - CHARGE_STATUS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "I_LED"     (component BitIO)
   - I_LED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - I_LED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - I_LED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - I_LED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "SM1"       (component SynchroMaster)
   - SM1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data).   For information about SW overrun behavior please see <General info page>.
   - SM1_SendChar -Sends one character to the channel.
   - SM1_RecvBlock -If any data received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns error code (it does not wait for data).  If less than requested number of characters is 
                received only the available data is copied from the receive buffer to the user specified destination and the 
                ERR_EXEMPTY value is returned.  This method is available only if non-zero length of input buffer is defined.    
                For information about SW overrun behavior please see <General info page>.
   - SM1_SendBlock -Send a block of characters to the channel. This method is only available if a non-zero length of output 
                buffer is defined.
   - SM1_ClearRxBuf -Clears the receive buffer. This method is available only if a non-zero length of input buffer is defined.
   - SM1_ClearTxBuf -Clears the transmit buffer. This method is only available if a non-zero length of output buffer is defined.
   - SM1_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.
   - SM1_GetCharsInTxBuf -Returns the number of characters in the output buffer.
   - SM1_GetError -Returns a set of errors on the channel (errors that cannot be returned in given methods). The component 
                accumulates errors in a set; after calling [GetError] this set is returned and cleared. This method is 
                available only if the "Interrupt service/event" property is enabled.

Module "Cpu"       (component MK24FN1M0LQ12)

===================================================================================
